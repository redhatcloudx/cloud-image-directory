name: Container-Release

on: [workflow_dispatch]

jobs:
  push:
    runs-on: ubuntu-latest
    name: Push Cloud-Image-Locator Container
    steps:
      - uses: actions/checkout@v3

      - name: Install latest podman
        if: matrix.install_latest
        run: |
          bash .github/install_latest_podman.sh

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Bootstrap poetry
        run: |
          curl -sL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Create output folder
        run: mkdir -p results

      - name: List aws hourly images
        run: |
          AWS_REGIONS=$(poetry run rhelocator-updater aws-regions)
          regions=$(echo "$AWS_REGIONS" | jq -r '.[]')
          for region in ${regions[@]}; do
            poetry run rhelocator-updater aws-hourly-images --region $region >> ./results/aws_hourly_images.json
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: List azure images
        run: |
          poetry run rhelocator-updater azure-images >> ./results/azure_images.json
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - id: 'google_auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: List Google Cloud images
        run: |
          poetry run rhelocator-updater gcp-images >> ./results/gcp_images.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: '${{ steps.google_auth.outputs.credentials_file_path }}'

      - name: Build API container
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: cloud-image-locator
          tags: latest ${{ github.sha }}
          containerfiles: |
            ./Containerfile

      - name: Push To quay.io
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/cloudexperience
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

      - name: Archive generated image data
        uses: actions/upload-artifact@v3
        with:
          name: Upload AWS hourly images
          path: ./results
          retention-days: 7
