# Borrowed from poetry's repo
# https://github.com/python-poetry/poetry/blob/master/.github/workflows/main.yml
name: Tests

on:
  push:
    paths-ignore:
      - "docs/**"
    branches:
      - main
  pull_request:
    paths-ignore:
      - "docs/**"
    branches:
      - "**"

concurrency:
  group: tests-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.9", "3.10", "3.11"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
        # If credentials aren't available (such as PRs from a fork or dependabot
        # commits) keep going with the remainder of the job.
        continue-on-error: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        run: pipx install poetry

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Install pytest plugin
        run: poetry run pip install pytest-github-actions-annotate-failures

      - name: Run pytest with live e2e tests
        if: env.AWS_ACCESS_KEY_ID != null
        run: poetry run python -m pytest -n auto -p no:sugar -q tests/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: "${{ steps.auth.outputs.credentials_file_path }}"

      - name: Run pytest with offline tests only
        if: env.SECRET_CHECK == null
        run: poetry run python -m pytest -m "not e2e" -n auto -p no:sugar -q tests/
        env:
          SECRET_CHECK: ${{ secrets.AWS_ACCESS_KEY_ID }}

      - name: Check for clean working tree
        run: |
          git diff --exit-code --stat HEAD
